openapi: 3.0.0
security:
  - userInfo:
      - profile.name
      - profile.gender
      - profile.email
      - profile.phonenumber
      - profile.birthdate
      - profile.zoneinfo
      - profile.locale
      - profile.updatedat
info:
  title: UserInfo Endpoint
  version: 1.5.0
  description: |
    The UserInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims 
    about the authenticated End-User.


    To obtain the required claims, RP will use an Access Token obtained from the 
    authentication flow defined as OpenID Connect Authentication. These Claims are 
    normally represented by a JSON object that contains a collection of name and value 
    pairs for the Claims.


    **Verified Data Representation extension for /userinfo resource**


    This extension to OpenID Connect wants to ensure that IDPs cannot mix up verified 
    and unverified Claims and incidentally process unverified Claims as verified Claims.


    The representation proposed therefore provides the IDP with the verified Claims 
    within a container element verified_claims. This container is composed of the verification 
    evidence related to a certain verification process and the corresponding Claims 
    about the End-User which were verified in this process.

      Verification elements contains the information about the process conducted to 
      verify a person's identity and bind the respective person data to a user account.



    **Preliminary arrangements for the use of described resources, list of source materials:**

      * [OpenID.Core](https://openid.net/specs/openid-connect-core-1_0.html) OpenID Connect Core 1.0

        * Signed and encrypted JWTs are used for any /userinfo calls and responses

        * In RP's IDP relationship the UserInfo Claims MUST be returned as the signed 
        and encrypted JSON object as required by definition during RP Client Registration to IDP.

        * In Service Provider's RP relationship the UserInfo Claims MUST be returned as the 
        members of a JSON object unless a signed or encrypted response was requested during 
        Client Registration.

        * The sub (subject) Claim MUST always be returned in the UserInfo Response.

        * If a Claim is not returned, that Claim Name SHOULD be omitted from the JSON object 
        representing the Claims; it SHOULD NOT be present with a null or empty string value.

        * The sub Claim in the UserInfo Response MUST be verified to exactly match the sub Claim 
        in the ID Token; if they do not match, the UserInfo Response values MUST NOT be used.

        * The UserInfo Endpoint MUST return a content-type header to indicate which format is 
        being returned and if the response body is a text JSON object; the response body SHOULD 
        be encoded using UTF-8.

        * If the UserInfo Response is signed and/or encrypted, then the Claims are returned in a 
        JWT and the content-type MUST be application/jwt. The response MAY be encrypted without 
        also being signed. If both signing and encryption are requested, the response MUST be 
        signed then encrypted, with the result being a Nested JWT.

      * [OpenID.IdentityAssurance](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html) 
      OpenID Connect for Identity Assurance 1.0

        * The `txn` Claim as defined in [RFC8417](https://tools.ietf.org/html/rfc8417) is used 
        in the context of RP data exchange to build audit trails across the parties involved 
        in an OpenID Connect transaction. Claim txn is always REQUIRED in the userinfo response 
        content.

        * This arrangement introduces the possibility for the bank to separate the verified
         Claims within a container element `verified_claims`. This container is composed of the 
         verification evidence related to a certain verification process and the corresponding 
         Claims about the End-User which were verified in this process.

        * Implementations MUST ignore any sub-element not defined in this specification or 
        extensions of this specification.

        * In the case of this definition verification element MUST consist of the following elements:

          * `trust_framework`: REQUIRED. String determining the trust framework governing the 
          identity verification process. For example, the value of ``cz_aml`` for verification 
          according to the Czech AML law.

          * `time`: OPTIONAL. Time stamp in ISO 8601:2004 [ISO8601-2004] YYYY-MM-DDThh:mm:ss±hh 
          format representing the date and time when identity verification took place.

          * `verification_process`: REQUIRED. In the case of this specification, the verification 
          process shall include the tax number of the relevant bank where the initial physical 
          verification of the client took place. This is the bank's tax number, which is kept in 
          the list of regulated and registered entities of the CNB JERRS.

          * `claims`: The claims element contains the claims about the End-User that were 
          verified during the defined verification process.

        * Verified Claims can be requested on the level of individual Claims about the End-User 
        by utilizing the claims parameter as defined in Section 5.5. of the OpenID Connect 
        specification [OpenID](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter)

servers:
  - url: /
paths:
  /userinfo:
    get:
      summary: Returns basic Claims about the authenticated End-User
      description: |
        The UserInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the 
        authenticated End-User. To obtain the requested Claims about the End-User, the Client makes 
        a request to the UserInfo Endpoint using an Access Token obtained through OpenID Connect 
        Authentication. These Claims are normally represented by a JSON object that contains a collection 
        of name and value pairs for the Claims.
      security:
        - Bearer: []
      tags:
        - userInfo
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userInfo'
              examples:
                userInfo:
                  $ref: '#/components/examples/userInfo'
            application/jwt:
              schema:
                type: string
                format: binary
              example: ewoidHlwIjoiVXNlcmluZm8iLAoiYWxnIjoiSFMyNTYiCn0K.ewoic3ViIjogIjIzZjFhYzAwLTVkNTQtNDE2OS1hMjg4LTc5NGFlMmVhZDBjNCIsCiJuYW1lIjogIkphbiBOb3bDoWsiLAoiZ2l2ZW5fbmFtZSI6ICJKYW4iLAogIAkiZmFtaWx5X25hbWUiOiAiTm92w6FrIiwKICAJIm1pZGRsZV9uYW1lIjogIiIsCiAgCSJuaWNrbmFtZSI6ICJab3JybyIsCiAgCSJwcmVmZXJyZWRfdXNlcm5hbWUiOiAiSmFuIiwKIAkiZW1haWwiOiAiSi5ub3Zha0BlbWFpbC5jb20iLAogIAkiZW1haWxfdmVyaWZpZWQiOiB0cnVlLAogIAkiZ2VuZGVyIjogIm1hbGUiLAogIAkiYmlydGhkYXRlIjogIjE5NzAtMDgtMDEiLAogIAkiem9uZWluZm8iOiAiRXVyb3BlL1ByYWd1ZSIsCiAgCSJsb2NhbGUiOiAiY3NfQ1oiLAogIAkicGhvbmVfbnVtYmVyIjogIis0MjAxMjM0NTY3ODkiLAogIAkicGhvbmVfbnVtYmVyX3ZlcmlmaWVkIjogZmFsc2UsCiAidXBkYXRlZF9hdCI6IDE1NjgxODg0MzMwMDAKfQo=.cDEuITlDHi14RUEGG3cxEWoXFzZWIG46JmMWZu+/vXImNBh0QUXlgq07xbYWYzF2biUl77+9dXZ2XAEjbFg1fgEDKRXYrgUuCm8kWzNKHgQKIARNPhIBMHlbMtS9O0FmZRl5I31w07FdPC4ndUVkRBd6Dj4nWmEKe9aHHjFgAxFIUTI8bgFbPfK6lbcXLFZsWVZpKBw0MmlUPQFw

        '401':
          description: 'Unauthorized request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
              example:
                value:
                  error: UNAUTHORIZED
                  error_description: 'Invalid/missing access token'

        '403':
          description: 'Request was forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
              example:
                value:
                  error: FORBIDDEN
                  error_description: 'Authentication with an expired access token or bearer access token having insufficient privileges'

        '500':
          description: 'Internal Server Error'

components:
  schemas:
    sub:
      type: string
      description: Identifier for the End-User at the Issuer.
      example: 23f1ac00-5d54-4169-a288-794ae2ead0c4
    txn:
      type: string
      description:
        The txn Claim as defined in [RFC8417] is used in the context of
        this extension to build audit trails across the parties involved in an
        OpenID Connect transaction.
      example: 31470547-0f7f-4794-acb0-d959f5a711a5
    name:
      type: string
      description: End-User's full name in displayable form including all name
        parts, possibly including titles and suffixes, ordered
        according to the End-User's locale and preferences.
      example: Jan Novák
    given_name:
      type: string
      description: Given name(s) or first name(s) of the End-User. Note that in
        some cultures, people can have multiple given names; all can
        be present, with the names being separated by space
        characters.
      example: Jan
    family_name:
      type: string
      description: Surname(s) or last name(s) of the End-User. Note that in some
        cultures, people can have multiple family names or no family
        name; all can be present, with the names being separated by
        space characters.
      example: Novák
    middle_name:
      type: string
      description: Middle name(s) of the End-User. Note that in some cultures,
        people can have multiple middle names; all can be present,
        with the names being separated by space characters. Also note
        that in some cultures, middle names are not used.
    nickname:
      type: string
      description:
        Casual name of the End-User that may or may not be the same as
        the given_name. For instance, a nickname value of Mike might
        be returned alongside a given_name value of Michael.
      example: Fantomas
    preferred_username:
      type: string
      description: Shorthand name by which the End-User wishes to be referred to
        at the RP, such as janedoe or j.doe. This value MAY be any
        valid JSON string including special characters such as @, /,
        or whitespace. The API consumer MUST NOT rely upon this value
        being unique.
      example: JanN
    title_prefix:
      type: string
      description: User's title prefix
      example: Ing.
    title_suffix:
      type: string
      description: User`s title suffix
      example: Jr.
    email:
      type: string
      description:
        End-User's preferred e-mail address. Its value MUST conform to
        the RFC 5322 [RFC5322] addr-spec syntax. The API consumer MUST
        NOT rely upon this value being unique.
      example: j.novak@email.com
    email_verified:
      type: boolean
      description: True if the End-User's e-mail address has been verified;
        otherwise false. When this Claim Value is true, this means
        that the OP took affirmative steps to ensure that this e-mail
        address was controlled by the End-User at the time the
        verification was performed. The means by which an e-mail
        address is verified is context-specific, and dependent upon
        the trust framework or contractual agreements within which the
        parties are operating.
      enum:
        - true
        - false
    gender:
      type: string
      description: End-User's gender. Values defined by this specification are
        female and male. Other values MAY be used when neither of the
        defined values are applicable.
      enum:
        - male
        - female
        - other
    birthdate:
      type: string
      description: End-User's birthday, represented as an ISO 8601:2004
        [ISO8601‑2004] YYYY-MM-DD format. The year MAY be 0000,
        indicating that it is omitted. To represent only the year,
        YYYY format is allowed. Note that depending on the underlying
        platform's date related function, providing just year can
        result in varying month and day, so the implementers need to
        take this factor into account to correctly process the dates.
      format: date
      example: 1970-08-01
    zoneinfo:
      type: string
      description: String from zoneinfo [zoneinfo] time zone database
        representing the End-User's time zone. For example,
        Europe/Paris or America/Los_Angeles.
      example: Europe/Prague
    locale:
      type: string
      description: End-User's locale, represented as a BCP47 [RFC5646] language
        tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1]
        language code in lowercase and an ISO 3166-1 Alpha-2
        [ISO3166‑1] country code in uppercase, separated by a dash.
        For example, en-US or fr-CA. As a compatibility note, some
        implementations have used an underscore as the separator
        rather than a dash, for example, en_US; Relying Parties MAY
        choose to accept this locale syntax as well.
      example: cs_CZ
    phone_number:
      type: string
      description: End-User's preferred telephone number. E.164 [E.164] is
        RECOMMENDED as the format of this Claim, for example, +1 (425)
        555-1212 or +56 (2) 687 2400. If the phone number contains an
        extension, it is RECOMMENDED that the extension be represented
        using the RFC 3966 [RFC3966] extension syntax, for example, +1
        (604) 555-1234;ext=5678.
      example: '+420123456789'
    phone_number_verified:
      type: boolean
      description: True if the End-User's phone number has been verified;
        otherwise false. When this Claim Value is true, this means
        that the OP took affirmative steps to ensure that this phone
        number was controlled by the End-User at the time the
        verification was performed. The means by which a phone number
        is verified is context-specific, and dependent upon the trust
        framework or contractual agreements within which the parties
        are operating. When true, the phone_number Claim MUST be in
        E.164 format and any extensions MUST be represented in RFC
        3966 format.
      enum:
        - true
        - false
    updated_at:
      type: number
      description:
        Time the End-User's information was last updated. Its value is
        a JSON number representing the number of seconds from
        1970-01-01T0:0:0Z as measured in UTC until the date/time.
      format: long
      example: 1568188433000

    claims:
      description: |
        Object that is the container for the verified Claims about the End-User.

        This is an element that will eventually be used by IDP in the future when the data will be verified, for example, 
        against state basic registers.
      type: object
      anyOf:
        - $ref: '#/components/schemas/name'
        - $ref: '#/components/schemas/given_name'
        - $ref: '#/components/schemas/family_name'
        - $ref: '#/components/schemas/middle_name'
        - $ref: '#/components/schemas/title_prefix'
        - $ref: '#/components/schemas/title_suffix'
        - $ref: '#/components/schemas/gender'
        - $ref: '#/components/schemas/birthdate'
      example:
        name: Jan Novák
        given_name: Jan
        family_name: Novák
        title_prefix: Ing.
        gender: male
        birthdate: '1970-08-01'

    verification:
      description: "This element contains the information about the process conducted to verify a person's identity and bind the respective person data to a user account."
      type: object
      required:
        - trust_framework
        - verification_process
      properties:
        trust_framework:
          type: string
          title: trust_framework
          enum:
            - cz_aml
          description: 'String determining the trust framework governing the identity verification process and the identity assurance level of the OP.'
        time:
          type: string
          format: 'date-time'
          title: time
          description: 'Time stamp in ISO 8601:2004 [ISO8601-2004] YYYY-MM-DDThh:mm:ss±hh format representing the date and time when identity verification took place. Presence of this element might be required for certain trust frameworks.'
        verification_process:
          type: string
          title: verification_process
          description: |
            Reference to the identity verification process as performed by the identity providers. Used for 
            backtracing in case of disputes or audits. Presence of this element might be required for certain trust 
            frameworks. In the case of SONIA, the value of this element requires the tax number of the bank 
            (financial institution) that carried out the identification process.

            This is the bank's tax number, which is kept in the list of regulated and registered entities of the CNB JERRS.
          example: '45244782'

    verified_claims:
      description: 'By this element RP wants to ensure that cannot mix up verified and unverified Claims and incidentally process unverified Claims as verified Claims.'
      type: object
      properties:
        verification:
          $ref: '#/components/schemas/verification'
        claims:
          $ref: '#/components/schemas/claims'
      required:
        - verification

    userInfo:
      description: ''
      properties:
        sub:
          $ref: '#/components/schemas/sub'
        txn:
          $ref: '#/components/schemas/txn'
        verified_claims:
          $ref: '#/components/schemas/verified_claims'
        name:
          $ref: '#/components/schemas/name'
        given_name:
          $ref: '#/components/schemas/given_name'
        family_name:
          $ref: '#/components/schemas/family_name'
        middle_name:
          $ref: '#/components/schemas/middle_name'
        nickname:
          $ref: '#/components/schemas/nickname'
        preferred_username:
          $ref: '#/components/schemas/preferred_username'
        email:
          $ref: '#/components/schemas/email'
        email_verified:
          $ref: '#/components/schemas/email_verified'
        gender:
          $ref: '#/components/schemas/gender'
        birthdate:
          $ref: '#/components/schemas/birthdate'
        zoneinfo:
          $ref: '#/components/schemas/zoneinfo'
        locale:
          $ref: '#/components/schemas/locale'
        phone_number:
          $ref: '#/components/schemas/phone_number'
        phone_number_verified:
          $ref: '#/components/schemas/phone_number_verified'
        updated_at:
          $ref: '#/components/schemas/updated_at'
      required:
        - sub
        - txn
        - verified_claims
        - updated_at

    unauthorized:
      description: Unauthorized
      properties:
        error:
          type: string
          title: error
        error_description:
          type: string
          title: message
      required:
        - error
    forbidden:
      description:
        Authentication with an expired access token or  bearer access token
        having insufficient privileges
      properties:
        error:
          type: string
          title: error
        error_description:
          type: string
          title: message
      required:
        - error
    token:
      type: object
      properties:
        token:
          type: string
  securitySchemes:
    userInfo:
      description: Authorization userInfo
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://
          tokenUrl: https://
          scopes:
            profile.name:
              name, given_name, family_name, middle_name, nickname and preffered_username
            profile.gender: gender
            profile.email: email and email_verified
            profile.phonenumber: phone_number and phone_number_verified
            profile.birthdate: birthdate
            profile.zoneinfo: zoneinfo
            profile.locale: locale
            profile.updatedat: updated_at
    Bearer:
      description: |
        For accessing the API a valid JWT token must be passed in all the queries in
        the 'Authorization' header.

        The following syntax must be used in the 'Authorization' header :

            `Bearer: xxxxxx.yyyyyyy.zzzzzz`
        
      type: apiKey
      name: Authorization
      in: header
  examples:
    userInfo:
      value:
        sub: 23f1ac00-5d54-4169-a288-794ae2ead0c4
        txn: 31470547-0f7f-4794-acb0-d959f5a711a5:openid:profile.name:profile.gender
        verified_claims:
          verification:
            trust_framework: cz_aml
            time: 2020-02-09T18:43:26.000Z
            verification_process: '45244782'
          claims:
            name: Jan Novák
            given_name: Jan
            family_name: Novák
            title_prefix: Ing.
            gender: male
            birthdate: '1970-08-01'
        nickname: Fantomas
        preferred_username: JanN
        email: j.novak@email.com
        email_verified: false
        zoneinfo: Europe/Prague
        locale: cs_CZ
        phone_number: '+420123456789'
        phone_number_verified: true
        updated_at: 1568188433000

    userInfoJWT:
      value: ewoidHlwIjoiVXNlcmluZm8iLAoiYWxnIjoiSFMyNTYiCn0K. ewoic3ViIjogIjIzZjFhYzAwLTVkNTQtNDE2OS1hMjg4LTc5NGFlMmVhZDBjNCIsCiJuYW1lIjogIkphbiBOb3bDoWsiLAoiZ2l2ZW5fbmFtZSI6ICJKYW4iLAogIAkiZmFtaWx5X25hbWUiOiAiTm92w6FrIiwKICAJIm1pZGRsZV9uYW1lIjogIiIsCiAgCSJuaWNrbmFtZSI6ICJab3JybyIsCiAgCSJwcmVmZXJyZWRfdXNlcm5hbWUiOiAiSmFuIiwKIAkiZW1haWwiOiAiSi5ub3Zha0BlbWFpbC5jb20iLAogIAkiZW1haWxfdmVyaWZpZWQiOiB0cnVlLAogIAkiZ2VuZGVyIjogIm1hbGUiLAogIAkiYmlydGhkYXRlIjogIjE5NzAtMDgtMDEiLAogIAkiem9uZWluZm8iOiAiRXVyb3BlL1ByYWd1ZSIsCiAgCSJsb2NhbGUiOiAiY3NfQ1oiLAogIAkicGhvbmVfbnVtYmVyIjogIis0MjAxMjM0NTY3ODkiLAogIAkicGhvbmVfbnVtYmVyX3ZlcmlmaWVkIjogZmFsc2UsCiAidXBkYXRlZF9hdCI6IDE1NjgxODg0MzMwMDAKfQo=. cDEuITlDHi14RUEGG3cxEWoXFzZWIG46JmMWZu+/vXImNBh0QUXlgq07xbYWYzF2biUl77+9dXZ2XAEjbFg1fgEDKRXYrgUuCm8kWzNKHgQKIARNPhIBMHlbMtS9O0FmZRl5I31w07FdPC4ndUVkRBd6Dj4nWmEKe9aHHjFgAxFIUTI8bgFbPfK6lbcXLFZsWVZpKBw0MmlUPQFw
